<?php

namespace DvTest;

use Exception;

/**
 * Геоид втиснут(грани пересекают поверхность геоида) в икосаэдр таким образом, чтобы вычислительные артефакты попадали в океаны
 * @see https://uber.github.io/h3/#/documentation/core-library/coordinate-systems
 *
 * Оно должно быть package-private, но php так не умеет
 */
class FaceDescriptions {

    // Количество граней икосаэдра
    public const ICOSAHEDRON_FACE_COUNT = 20;

    // Координатные оси для каждой грани
    private const BASIS_AXES = [
        [5.619958268523939882, 3.525563166130744542, 1.431168063737548730],
        [5.760339081714187279, 3.665943979320991689, 1.571548876927796127],
        [0.780213654393430055, 4.969003859179821079, 2.874608756786625655],
        [0.430469363979999913, 4.619259568766391033, 2.524864466373195467],
        [6.130269123335111400, 4.035874020941915804, 1.941478918548720291],
        [2.692877706530642877, 0.598482604137447119, 4.787272808923838195],
        [2.982963003477243874, 0.888567901084048369, 5.077358105870439581],
        [3.532912002790141181, 1.438516900396945656, 5.627307105183336758],
        [3.494305004259568154, 1.399909901866372864, 5.588700106652763840],
        [3.003214169499538391, 0.908819067106342928, 5.097609271892733906],
        [5.930472956509811562, 3.836077854116615875, 1.741682751723420374],
        [0.138378484090254847, 4.327168688876645809, 2.232773586483450311],
        [0.448714947059150361, 4.637505151845541521, 2.543110049452346120],
        [0.158629650112549365, 4.347419854898940135, 2.253024752505744869],
        [5.891865957979238535, 3.797470855586042958, 1.703075753192847583],
        [2.711123289609793325, 0.616728187216597771, 4.805518392002988683],
        [3.294508837434268316, 1.200113735041072948, 5.388903939827463911],
        [3.804819692245439833, 1.710424589852244509, 5.899214794638635174],
        [3.664438879055192436, 1.570043776661997111, 5.758833981448388027],
        [2.361378999196363184, 0.266983896803167583, 4.455774101589558636],
    ];

    public static function getBasisAxesForFace(int $face): Vector3d {
        if (($face < 0) || ($face >= static::ICOSAHEDRON_FACE_COUNT)) {
            throw new Exception('Cant process face ' . $face);
        }
        return Vector3d::createFromArray(self::BASIS_AXES[$face]);
    }

    // Точки центров граней
    private const FACE_CENTER_POINTS = [
        [0.2199307791404606,   0.6583691780274996, 0.7198475378926182],
        [-0.2139234834501421,  0.1478171829550703, 0.9656017935214205],
        [0.1092625278784797,  -0.4811951572873210, 0.8697775121287253],
        [0.7428567301586791,  -0.3593941678278028, 0.5648005936517033],
        [0.8112534709140969,   0.3448953237639384, 0.4721387736413930],
        [-0.1055498149613921,  0.9794457296411413, 0.1718874610009365],
        [-0.8075407579970092,  0.1533552485898818, 0.5695261994882688],
        [-0.2846148069787907, -0.8644080972654206, 0.4144792552473539],
        [0.7405621473854482,  -0.6673299564565524, -0.0789837646326737],
        [0.8512303986474293,   0.4722343788582681, -0.2289137388687808],
        [-0.7405621473854481,  0.6673299564565524, 0.0789837646326737],
        [-0.8512303986474292, -0.4722343788582682, 0.2289137388687808],
        [0.1055498149613919,  -0.9794457296411413, -0.1718874610009365],
        [0.8075407579970092,  -0.1533552485898819, -0.5695261994882688],
        [0.2846148069787908,   0.8644080972654204, -0.4144792552473539],
        [-0.7428567301586791,  0.3593941678278027, -0.5648005936517033],
        [-0.8112534709140971, -0.3448953237639382, -0.4721387736413930],
        [-0.2199307791404607, -0.6583691780274996, -0.7198475378926182],
        [0.2139234834501420,  -0.1478171829550704, -0.9656017935214205],
        [-0.1092625278784796,  0.4811951572873210, -0.8697775121287253],
    ];

    public static function getFaceCenterPoint(int $face): Vector3d {
        if (($face < 0) || ($face >= static::ICOSAHEDRON_FACE_COUNT)) {
            throw new Exception('Cant process face ' . $face);
        }
        return Vector3d::createFromArray(self::FACE_CENTER_POINTS[$face]);
    }

    // Точки центров граней в сферических координатах
    private const FACE_CENTERS_COORDINATES = [
        [0.803582649718989942,   1.248397419617396099],
        [1.307747883455638156,   2.536945009877921159],
        [1.054751253523952054,  -1.347517358900396623],
        [0.600191595538186799,  -0.450603909469755746],
        [0.491715428198773866,   0.401988202911306943],
        [0.172745327415618701,   1.678146885280433686],
        [0.605929321571350690,   2.953923329812411617],
        [0.427370518328979641,  -1.888876200336285401],
        [-0.079066118549212831, -0.733429513380867741],
        [-0.230961644455383637,  0.506495587332349035],
        [0.079066118549212831,   2.408163140208925497],
        [0.230961644455383637,  -2.635097066257444203],
        [-0.172745327415618701, -1.463445768309359553],
        [-0.605929321571350690, -0.187669323777381622],
        [-0.427370518328979641,  1.252716453253507838],
        [-0.600191595538186799,  2.690988744120037492],
        [-0.491715428198773866, -2.739604450678486295],
        [-0.803582649718989942, -1.893195233972397139],
        [-1.307747883455638156, -0.604647643711872080],
        [-1.054751253523952054,  1.794075294689396615],
    ];

    public static function getFaceCenterGeoCoordinates(int $face): GeoCoordinates {
        if (($face < 0) || ($face >= FaceDescriptions::ICOSAHEDRON_FACE_COUNT)) {
            throw new Exception('Cant process face ' . $face);
        }
        return new GeoCoordinates(self::FACE_CENTERS_COORDINATES[$face][0], self::FACE_CENTERS_COORDINATES[$face][1]);
    }
}
