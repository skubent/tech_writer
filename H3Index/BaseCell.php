<?php

namespace DvTest;

/**
 * Базовые ячейки H3 индекса (нулевого разрешения)
 * @see https://uber.github.io/h3/#/documentation/core-library/overview
 *
 * Оно должно быть package-private, но php так не умеет
 */
class BaseCell {
    /** @var int */
    public $face;

    /** @var HexagonCoordinates */
    public $hexagonCoordinates;

    /** @var bool */
    public $isPentagon;

    /** @var int[] */
    public $cwOffsetPentagon;

    /** @var int */
    public $cellId;

    public function __construct(int $id, int $face, array $ijk, bool $isPentagon, array $cwOffsetPentagon) {
        $this->cellId             = $id;
        $this->face               = $face;
        $this->hexagonCoordinates = new HexagonCoordinates($ijk[0], $ijk[1], $ijk[2]);
        $this->isPentagon         = $isPentagon;
        $this->cwOffsetPentagon   = $cwOffsetPentagon;
    }

    public function isPolarPentagon(): bool {
        return $this->cellId == 4 || $this->cellId == 117;
    }

    private const BASE_CELLS_DATA = [
        [1, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 0
        [2, [1, 1, 0], 0, [0, 0]],     // Базовая ячейка 1
        [1, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 2
        [2, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 3
        [0, [2, 0, 0], 1, [-1, -1]],   // Базовая ячейка 4
        [1, [1, 1, 0], 0, [0, 0]],     // Базовая ячейка 5
        [1, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 6
        [2, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 7
        [0, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 8
        [2, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 9
        [1, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 10
        [1, [0, 1, 1], 0, [0, 0]],     // Базовая ячейка 11
        [3, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 12
        [3, [1, 1, 0], 0, [0, 0]],     // Базовая ячейка 13
        [11, [2, 0, 0], 1, [2, 6]],    // Базовая ячейка 14
        [4, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 15
        [0, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 16
        [6, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 17
        [0, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 18
        [2, [0, 1, 1], 0, [0, 0]],     // Базовая ячейка 19
        [7, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 20
        [2, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 21
        [0, [1, 1, 0], 0, [0, 0]],     // Базовая ячейка 22
        [6, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 23
        [10, [2, 0, 0], 1, [1, 5]],    // Базовая ячейка 24
        [6, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 25
        [3, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 26
        [11, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 27
        [4, [1, 1, 0], 0, [0, 0]],     // Базовая ячейка 28
        [3, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 29
        [0, [0, 1, 1], 0, [0, 0]],     // Базовая ячейка 30
        [4, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 31
        [5, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 32
        [0, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 33
        [7, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 34
        [11, [1, 1, 0], 0, [0, 0]],    // Базовая ячейка 35
        [7, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 36
        [10, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 37
        [12, [2, 0, 0], 1, [3, 7]],    // Базовая ячейка 38
        [6, [1, 0, 1], 0, [0, 0]],     // Базовая ячейка 39
        [7, [1, 0, 1], 0, [0, 0]],     // Базовая ячейка 40
        [4, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 41
        [3, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 42
        [3, [0, 1, 1], 0, [0, 0]],     // Базовая ячейка 43
        [4, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 44
        [6, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 45
        [11, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 46
        [8, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 47
        [5, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 48
        [14, [2, 0, 0], 1, [0, 9]],    // Базовая ячейка 49
        [5, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 50
        [12, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 51
        [10, [1, 1, 0], 0, [0, 0]],    // Базовая ячейка 52
        [4, [0, 1, 1], 0, [0, 0]],     // Базовая ячейка 53
        [12, [1, 1, 0], 0, [0, 0]],    // Базовая ячейка 54
        [7, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 55
        [11, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 56
        [10, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 57
        [13, [2, 0, 0], 1, [4, 8]],    // Базовая ячейка 58
        [10, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 59
        [11, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 60
        [9, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 61
        [8, [0, 1, 0], 0, [0, 0]],     // Базовая ячейка 62
        [6, [2, 0, 0], 1, [11, 15]],   // Базовая ячейка 63
        [8, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 64
        [9, [0, 0, 1], 0, [0, 0]],     // Базовая ячейка 65
        [14, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 66
        [5, [1, 0, 1], 0, [0, 0]],     // Базовая ячейка 67
        [16, [0, 1, 1], 0, [0, 0]],    // Базовая ячейка 68
        [8, [1, 0, 1], 0, [0, 0]],     // Базовая ячейка 69
        [5, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 70
        [12, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 71
        [7, [2, 0, 0], 1, [12, 16]],   // Базовая ячейка 72
        [12, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 73
        [10, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 74
        [9, [0, 0, 0], 0, [0, 0]],     // Базовая ячейка 75
        [13, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 76
        [16, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 77
        [15, [0, 1, 1], 0, [0, 0]],    // Базовая ячейка 78
        [15, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 79
        [16, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 80
        [14, [1, 1, 0], 0, [0, 0]],    // Базовая ячейка 81
        [13, [1, 1, 0], 0, [0, 0]],    // Базовая ячейка 82
        [5, [2, 0, 0], 1, [10, 19]],   // Базовая ячейка 83
        [8, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 84
        [14, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 85
        [9, [1, 0, 1], 0, [0, 0]],     // Базовая ячейка 86
        [14, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 87
        [17, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 88
        [12, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 89
        [16, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 90
        [17, [0, 1, 1], 0, [0, 0]],    // Базовая ячейка 91
        [15, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 92
        [16, [1, 0, 1], 0, [0, 0]],    // Базовая ячейка 93
        [9, [1, 0, 0], 0, [0, 0]],     // Базовая ячейка 94
        [15, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 95
        [13, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 96
        [8, [2, 0, 0], 1, [13, 17]],   // Базовая ячейка 97
        [13, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 98
        [17, [1, 0, 1], 0, [0, 0]],    // Базовая ячейка 99
        [19, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 100
        [14, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 101
        [19, [0, 1, 1], 0, [0, 0]],    // Базовая ячейка 102
        [17, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 103
        [13, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 104
        [17, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 105
        [16, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 106
        [9, [2, 0, 0], 1, [14, 18]],   // Базовая ячейка 107
        [15, [1, 0, 1], 0, [0, 0]],    // Базовая ячейка 108
        [15, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 109
        [18, [0, 1, 1], 0, [0, 0]],    // Базовая ячейка 110
        [18, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 111
        [19, [0, 0, 1], 0, [0, 0]],    // Базовая ячейка 112
        [17, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 113
        [19, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 114
        [18, [0, 1, 0], 0, [0, 0]],    // Базовая ячейка 115
        [18, [1, 0, 1], 0, [0, 0]],    // Базовая ячейка 116
        [19, [2, 0, 0], 1, [-1, -1]],  // Базовая ячейка 117
        [19, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 118
        [18, [0, 0, 0], 0, [0, 0]],    // Базовая ячейка 119
        [19, [1, 0, 1], 0, [0, 0]],    // Базовая ячейка 120
        [18, [1, 0, 0], 0, [0, 0]],    // Базовая ячейка 121
    ];

    public static function getBaseCell(int $face, HexagonCoordinates $hexagonCoordinates): BaseCell {
        $baseCellId = static::getBaseCellId($face, $hexagonCoordinates);
        return static::getBaseCellById($baseCellId);
    }

    public static function getBaseCellById(int $baseCellId): BaseCell {
        return new self(
            $baseCellId,
            self::BASE_CELLS_DATA[$baseCellId][0],
            self::BASE_CELLS_DATA[$baseCellId][1],
            self::BASE_CELLS_DATA[$baseCellId][2] > 0,
            self::BASE_CELLS_DATA[$baseCellId][3]
        );
    }

    // Размещение базовых ячеек по граням
    private const BASE_CELL_IDS_AND_ROTATIONS = [
        [// Грань 0
            [
                [[16, 0], [18, 0], [24, 0]],
                [[33, 0], [30, 0], [32, 3]],
                [[49, 1], [48, 3], [50, 3]],
            ],
            [
                [[8, 0], [5, 5], [10, 5]],
                [[22, 0], [16, 0], [18, 0]],
                [[41, 1], [33, 0], [30, 0]],
            ],
            [
                [[4, 0], [0, 5], [2, 5]],
                [[15, 1], [8, 0], [5, 5]],
                [[31, 1], [22, 0], [16, 0]],
            ],
        ],
        [// Грань 1
            [
                [[2, 0], [6, 0], [14, 0]],
                [[10, 0], [11, 0], [17, 3]],
                [[24, 1], [23, 3], [25, 3]],
            ],
            [
                [[0, 0], [1, 5], [9, 5]],
                [[5, 0], [2, 0], [6, 0]],
                [[18, 1], [10, 0], [11, 0]],
            ],
            [
                [[4, 1], [3, 5], [7, 5]],
                [[8, 1], [0, 0], [1, 5]],
                [[16, 1], [5, 0], [2, 0]],
            ],
        ],
        [// Грань 2
            [
                [[7, 0], [21, 0], [38, 0]],
                [[9, 0], [19, 0], [34, 3]],
                [[14, 1], [20, 3], [36, 3]],
            ],
            [
                [[3, 0], [13, 5], [29, 5]],
                [[1, 0], [7, 0], [21, 0]],
                [[6, 1], [9, 0], [19, 0]],
            ],
            [
                [[4, 2], [12, 5], [26, 5]],
                [[0, 1], [3, 0], [13, 5]],
                [[2, 1], [1, 0], [7, 0]],
            ],
        ],
        [// Грань 3
            [
                [[26, 0], [42, 0], [58, 0]],
                [[29, 0], [43, 0], [62, 3]],
                [[38, 1], [47, 3], [64, 3]],
            ],
            [
                [[12, 0], [28, 5], [44, 5]],
                [[13, 0], [26, 0], [42, 0]],
                [[21, 1], [29, 0], [43, 0]],
            ],
            [
                [[4, 3], [15, 5], [31, 5]],
                [[3, 1], [12, 0], [28, 5]],
                [[7, 1], [13, 0], [26, 0]],
            ],
        ],
        [// Грань 4
            [
                [[31, 0], [41, 0], [49, 0]],
                [[44, 0], [53, 0], [61, 3]],
                [[58, 1], [65, 3], [75, 3]],
            ],
            [
                [[15, 0], [22, 5], [33, 5]],
                [[28, 0], [31, 0], [41, 0]],
                [[42, 1], [44, 0], [53, 0]],
            ],
            [
                [[4, 4], [8, 5], [16, 5]],
                [[12, 1], [15, 0], [22, 5]],
                [[26, 1], [28, 0], [31, 0]],
            ],
        ],
        [// Грань 5
            [
                [[50, 0], [48, 0], [49, 3]],
                [[32, 0], [30, 3], [33, 3]],
                [[24, 3], [18, 3], [16, 3]],
            ],
            [
                [[70, 0], [67, 0], [66, 3]],
                [[52, 3], [50, 0], [48, 0]],
                [[37, 3], [32, 0], [30, 3]],
            ],
            [
                [[83, 0], [87, 3], [85, 3]],
                [[74, 3], [70, 0], [67, 0]],
                [[57, 1], [52, 3], [50, 0]],
            ],
        ],
        [// Грань 6
            [
                [[25, 0], [23, 0], [24, 3]],
                [[17, 0], [11, 3], [10, 3]],
                [[14, 3], [6, 3], [2, 3]],
            ],
            [
                [[45, 0], [39, 0], [37, 3]],
                [[35, 3], [25, 0], [23, 0]],
                [[27, 3], [17, 0], [11, 3]],
            ],
            [
                [[63, 0], [59, 3], [57, 3]],
                [[56, 3], [45, 0], [39, 0]],
                [[46, 3], [35, 3], [25, 0]],
            ],
        ],
        [// Грань 7
            [
                [[36, 0], [20, 0], [14, 3]],
                [[34, 0], [19, 3], [9, 3]],
                [[38, 3], [21, 3], [7, 3]],
            ],
            [
                [[55, 0], [40, 0], [27, 3]],
                [[54, 3], [36, 0], [20, 0]],
                [[51, 3], [34, 0], [19, 3]],
            ],
            [
                [[72, 0], [60, 3], [46, 3]],
                [[73, 3], [55, 0], [40, 0]],
                [[71, 3], [54, 3], [36, 0]],
            ],
        ],
        [// Грань 8
            [
                [[64, 0], [47, 0], [38, 3]],
                [[62, 0], [43, 3], [29, 3]],
                [[58, 3], [42, 3], [26, 3]],
            ],
            [
                [[84, 0], [69, 0], [51, 3]],
                [[82, 3], [64, 0], [47, 0]],
                [[76, 3], [62, 0], [43, 3]],
            ],
            [
                [[97, 0], [89, 3], [71, 3]],
                [[98, 3], [84, 0], [69, 0]],
                [[96, 3], [82, 3], [64, 0]],
            ],
        ],
        [// Грань 9
            [
                [[75, 0], [65, 0], [58, 3]],
                [[61, 0], [53, 3], [44, 3]],
                [[49, 3], [41, 3], [31, 3]],
            ],
            [
                [[94, 0], [86, 0], [76, 3]],
                [[81, 3], [75, 0], [65, 0]],
                [[66, 3], [61, 0], [53, 3]],
            ],
            [
                [[107, 0], [104, 3], [96, 3]],
                [[101, 3], [94, 0], [86, 0]],
                [[85, 3], [81, 3], [75, 0]],
            ],
        ],
        [// Грань 10
            [
                [[57, 0], [59, 0], [63, 3]],
                [[74, 0], [78, 3], [79, 3]],
                [[83, 3], [92, 3], [95, 3]],
            ],
            [
                [[37, 0], [39, 3], [45, 3]],
                [[52, 0], [57, 0], [59, 0]],
                [[70, 3], [74, 0], [78, 3]],
            ],
            [
                [[24, 0], [23, 3], [25, 3]],
                [[32, 3], [37, 0], [39, 3]],
                [[50, 3], [52, 0], [57, 0]],
            ],
        ],
        [// Грань 11
            [
                [[46, 0], [60, 0], [72, 3]],
                [[56, 0], [68, 3], [80, 3]],
                [[63, 3], [77, 3], [90, 3]],
            ],
            [
                [[27, 0], [40, 3], [55, 3]],
                [[35, 0], [46, 0], [60, 0]],
                [[45, 3], [56, 0], [68, 3]],
            ],
            [
                [[14, 0], [20, 3], [36, 3]],
                [[17, 3], [27, 0], [40, 3]],
                [[25, 3], [35, 0], [46, 0]],
            ],
        ],
        [// Грань 12
            [
                [[71, 0], [89, 0], [97, 3]],
                [[73, 0], [91, 3], [103, 3]],
                [[72, 3], [88, 3], [105, 3]],
            ],
            [
                [[51, 0], [69, 3], [84, 3]],
                [[54, 0], [71, 0], [89, 0]],
                [[55, 3], [73, 0], [91, 3]],
            ],
            [
                [[38, 0], [47, 3], [64, 3]],
                [[34, 3], [51, 0], [69, 3]],
                [[36, 3], [54, 0], [71, 0]],
            ],
        ],
        [// Грань 13
            [
                [[96, 0], [104, 0], [107, 3]],
                [[98, 0], [110, 3], [115, 3]],
                [[97, 3], [111, 3], [119, 3]],
            ],
            [
                [[76, 0], [86, 3], [94, 3]],
                [[82, 0], [96, 0], [104, 0]],
                [[84, 3], [98, 0], [110, 3]],
            ],
            [
                [[58, 0], [65, 3], [75, 3]],
                [[62, 3], [76, 0], [86, 3]],
                [[64, 3], [82, 0], [96, 0]],
            ],
        ],
        [// Грань 14
            [
                [[85, 0], [87, 0], [83, 3]],
                [[101, 0], [102, 3], [100, 3]],
                [[107, 3], [112, 3], [114, 3]],
            ],
            [
                [[66, 0], [67, 3], [70, 3]],
                [[81, 0], [85, 0], [87, 0]],
                [[94, 3], [101, 0], [102, 3]],
            ],
            [
                [[49, 0], [48, 3], [50, 3]],
                [[61, 3], [66, 0], [67, 3]],
                [[75, 3], [81, 0], [85, 0]],
            ],
        ],
        [// Грань 15
            [
                [[95, 0], [92, 0], [83, 0]],
                [[79, 0], [78, 0], [74, 3]],
                [[63, 1], [59, 3], [57, 3]],
            ],
            [
                [[109, 0], [108, 0], [100, 5]],
                [[93, 1], [95, 0], [92, 0]],
                [[77, 1], [79, 0], [78, 0]],
            ],
            [
                [[117, 4], [118, 5], [114, 5]],
                [[106, 1], [109, 0], [108, 0]],
                [[90, 1], [93, 1], [95, 0]],
            ],
        ],
        [// Грань 16
            [
                [[90, 0], [77, 0], [63, 0]],
                [[80, 0], [68, 0], [56, 3]],
                [[72, 1], [60, 3], [46, 3]],
            ],
            [
                [[106, 0], [93, 0], [79, 5]],
                [[99, 1], [90, 0], [77, 0]],
                [[88, 1], [80, 0], [68, 0]],
            ],
            [
                [[117, 3], [109, 5], [95, 5]],
                [[113, 1], [106, 0], [93, 0]],
                [[105, 1], [99, 1], [90, 0]],
            ],
        ],
        [// Грань 17
            [
                [[105, 0], [88, 0], [72, 0]],
                [[103, 0], [91, 0], [73, 3]],
                [[97, 1], [89, 3], [71, 3]],
            ],
            [
                [[113, 0], [99, 0], [80, 5]],
                [[116, 1], [105, 0], [88, 0]],
                [[111, 1], [103, 0], [91, 0]],
            ],
            [
                [[117, 2], [106, 5], [90, 5]],
                [[121, 1], [113, 0], [99, 0]],
                [[119, 1], [116, 1], [105, 0]],
            ],
        ],
        [// Грань 18
            [
                [[119, 0], [111, 0], [97, 0]],
                [[115, 0], [110, 0], [98, 3]],
                [[107, 1], [104, 3], [96, 3]],
            ],
            [
                [[121, 0], [116, 0], [103, 5]],
                [[120, 1], [119, 0], [111, 0]],
                [[112, 1], [115, 0], [110, 0]],
            ],
            [
                [[117, 1], [113, 5], [105, 5]],
                [[118, 1], [121, 0], [116, 0]],
                [[114, 1], [120, 1], [119, 0]],
            ],
        ],
        [// Грань 19
            [
                [[114, 0], [112, 0], [107, 0]],
                [[100, 0], [102, 0], [101, 3]],
                [[83, 1], [87, 3], [85, 3]],
            ],
            [
                [[118, 0], [120, 0], [115, 5]],
                [[108, 1], [114, 0], [112, 0]],
                [[92, 1], [100, 0], [102, 0]],
            ],
            [
                [[117, 0], [121, 5], [119, 5]],
                [[109, 1], [118, 0], [120, 0]],
                [[95, 1], [108, 1], [114, 0]],
            ],
        ],
    ];

    public static function getBaseCellRotationCount(int $face, HexagonCoordinates $hexagonCoordinates): int {
        return self::BASE_CELL_IDS_AND_ROTATIONS[$face][$hexagonCoordinates->i][$hexagonCoordinates->j][$hexagonCoordinates->k][1];
    }

    public static function getBaseCellId(int $face, HexagonCoordinates $hexagonCoordinates): int {
        return self::BASE_CELL_IDS_AND_ROTATIONS[$face][$hexagonCoordinates->i][$hexagonCoordinates->j][$hexagonCoordinates->k][0];
    }

    private const BASE_CELL_NEIGHBORS = [
        [0, 1, 5, 2, 4, 3, 8],
        [1, 7, 6, 9, 0, 3, 2],
        [2, 6, 10, 11, 0, 1, 5],
        [3, 13, 1, 7, 4, 12, 0],
        [4, null, 15, 8, 3, 0, 12],
        [5, 2, 18, 10, 8, 0, 16],
        [6, 14, 11, 17, 1, 9, 2],
        [7, 21, 9, 19, 3, 13, 1],
        [8, 5, 22, 16, 4, 0, 15],
        [9, 19, 14, 20, 1, 7, 6],
        [10, 11, 24, 23, 5, 2, 18],
        [11, 17, 23, 25, 2, 6, 10],
        [12, 28, 13, 26, 4, 15, 3],
        [13, 26, 21, 29, 3, 12, 7],
        [14, null, 17, 27, 9, 20, 6],
        [15, 22, 28, 31, 4, 8, 12],
        [16, 18, 33, 30, 8, 5, 22],
        [17, 11, 14, 6, 35, 25, 27],
        [18, 24, 30, 32, 5, 10, 16],
        [19, 34, 20, 36, 7, 21, 9],
        [20, 14, 19, 9, 40, 27, 36],
        [21, 38, 19, 34, 13, 29, 7],
        [22, 16, 41, 33, 15, 8, 31],
        [23, 24, 11, 10, 39, 37, 25],
        [24, null, 32, 37, 10, 23, 18],
        [25, 23, 17, 11, 45, 39, 35],
        [26, 42, 29, 43, 12, 28, 13],
        [27, 40, 35, 46, 14, 20, 17],
        [28, 31, 42, 44, 12, 15, 26],
        [29, 43, 38, 47, 13, 26, 21],
        [30, 32, 48, 50, 16, 18, 33],
        [31, 41, 44, 53, 15, 22, 28],
        [32, 30, 24, 18, 52, 50, 37],
        [33, 30, 49, 48, 22, 16, 41],
        [34, 19, 38, 21, 54, 36, 51],
        [35, 46, 45, 56, 17, 27, 25],
        [36, 20, 34, 19, 55, 40, 54],
        [37, 39, 52, 57, 24, 23, 32],
        [38, null, 34, 51, 29, 47, 21],
        [39, 37, 25, 23, 59, 57, 45],
        [40, 27, 36, 20, 60, 46, 55],
        [41, 49, 53, 61, 22, 33, 31],
        [42, 58, 43, 62, 28, 44, 26],
        [43, 62, 47, 64, 26, 42, 29],
        [44, 53, 58, 65, 28, 31, 42],
        [45, 39, 35, 25, 63, 59, 56],
        [46, 60, 56, 68, 27, 40, 35],
        [47, 38, 43, 29, 69, 51, 64],
        [48, 49, 30, 33, 67, 66, 50],
        [49, null, 61, 66, 33, 48, 41],
        [50, 48, 32, 30, 70, 67, 52],
        [51, 69, 54, 71, 38, 47, 34],
        [52, 57, 70, 74, 32, 37, 50],
        [53, 61, 65, 75, 31, 41, 44],
        [54, 71, 55, 73, 34, 51, 36],
        [55, 40, 54, 36, 72, 60, 73],
        [56, 68, 63, 77, 35, 46, 45],
        [57, 59, 74, 78, 37, 39, 52],
        [58, null, 62, 76, 44, 65, 42],
        [59, 63, 78, 79, 39, 45, 57],
        [60, 72, 68, 80, 40, 55, 46],
        [61, 53, 49, 41, 81, 75, 66],
        [62, 43, 58, 42, 82, 64, 76],
        [63, null, 56, 45, 79, 59, 77],
        [64, 47, 62, 43, 84, 69, 82],
        [65, 58, 53, 44, 86, 76, 75],
        [66, 67, 81, 85, 49, 48, 61],
        [67, 66, 50, 48, 87, 85, 70],
        [68, 56, 60, 46, 90, 77, 80],
        [69, 51, 64, 47, 89, 71, 84],
        [70, 67, 52, 50, 83, 87, 74],
        [71, 89, 73, 91, 51, 69, 54],
        [72, null, 73, 55, 80, 60, 88],
        [73, 91, 72, 88, 54, 71, 55],
        [74, 78, 83, 92, 52, 57, 70],
        [75, 65, 61, 53, 94, 86, 81],
        [76, 86, 82, 96, 58, 65, 62],
        [77, 63, 68, 56, 93, 79, 90],
        [78, 74, 59, 57, 95, 92, 79],
        [79, 78, 63, 59, 93, 95, 77],
        [80, 68, 72, 60, 99, 90, 88],
        [81, 85, 94, 101, 61, 66, 75],
        [82, 96, 84, 98, 62, 76, 64],
        [83, null, 74, 70, 100, 87, 92],
        [84, 69, 82, 64, 97, 89, 98],
        [85, 87, 101, 102, 66, 67, 81],
        [86, 76, 75, 65, 104, 96, 94],
        [87, 83, 102, 100, 67, 70, 85],
        [88, 72, 91, 73, 99, 80, 105],
        [89, 97, 91, 103, 69, 84, 71],
        [90, 77, 80, 68, 106, 93, 99],
        [91, 73, 89, 71, 105, 88, 103],
        [92, 83, 78, 74, 108, 100, 95],
        [93, 79, 90, 77, 109, 95, 106],
        [94, 86, 81, 75, 107, 104, 101],
        [95, 92, 79, 78, 109, 108, 93],
        [96, 104, 98, 110, 76, 86, 82],
        [97, null, 98, 84, 103, 89, 111],
        [98, 110, 97, 111, 82, 96, 84],
        [99, 80, 105, 88, 106, 90, 113],
        [100, 102, 83, 87, 108, 114, 92],
        [101, 102, 107, 112, 81, 85, 94],
        [102, 101, 87, 85, 114, 112, 100],
        [103, 91, 97, 89, 116, 105, 111],
        [104, 107, 110, 115, 86, 94, 96],
        [105, 88, 103, 91, 113, 99, 116],
        [106, 93, 99, 90, 117, 109, 113],
        [107, null, 101, 94, 115, 104, 112],
        [108, 100, 95, 92, 118, 114, 109],
        [109, 108, 93, 95, 117, 118, 106],
        [110, 98, 104, 96, 119, 111, 115],
        [111, 97, 110, 98, 116, 103, 119],
        [112, 107, 102, 101, 120, 115, 114],
        [113, 99, 116, 105, 117, 106, 121],
        [114, 112, 100, 102, 118, 120, 108],
        [115, 110, 107, 104, 120, 119, 112],
        [116, 103, 119, 111, 113, 105, 121],
        [117, null, 109, 118, 113, 121, 106],
        [118, 120, 108, 114, 117, 121, 109],
        [119, 111, 115, 110, 121, 116, 120],
        [120, 115, 114, 112, 121, 119, 118],
        [121, 116, 120, 119, 117, 113, 118],
    ];

    public static function getNeighbor(int $baseCellId, int $direction) {
        return self::BASE_CELL_NEIGHBORS[$baseCellId][$direction];
    }

    private const BASE_CELL_NEIGHBOR_COUNTER_CLOCKWISE_ROTATIONS = [
        [0, 5, 0, 0, 1, 5, 1],
        [0, 0, 1, 0, 1, 0, 1],
        [0, 0, 0, 0, 0, 5, 0],
        [0, 5, 0, 0, 2, 5, 1],
        [0, -1, 1, 0, 3, 4, 2],
        [0, 0, 1, 0, 1, 0, 1],
        [0, 0, 0, 3, 5, 5, 0],
        [0, 0, 0, 0, 0, 5, 0],
        [0, 5, 0, 0, 0, 5, 1],
        [0, 0, 1, 3, 0, 0, 1],
        [0, 0, 1, 3, 0, 0, 1],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 5, 0, 0, 3, 5, 1],
        [0, 0, 1, 0, 1, 0, 1],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 5, 0, 0, 4, 5, 1],
        [0, 0, 0, 0, 0, 5, 0],
        [0, 3, 3, 3, 3, 0, 3],
        [0, 0, 0, 3, 5, 5, 0],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 3, 3, 3, 0, 3, 0],
        [0, 0, 0, 3, 5, 5, 0],
        [0, 0, 1, 0, 1, 0, 1],
        [0, 3, 3, 3, 0, 3, 0],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 0, 0, 3, 0, 0, 3],
        [0, 0, 0, 0, 0, 5, 0],
        [0, 3, 0, 0, 0, 3, 3],
        [0, 0, 1, 0, 1, 0, 1],
        [0, 0, 1, 3, 0, 0, 1],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 0, 0, 0, 0, 5, 0],
        [0, 3, 3, 3, 3, 0, 3],
        [0, 0, 1, 3, 0, 0, 1],
        [0, 3, 3, 3, 3, 0, 3],
        [0, 0, 3, 0, 3, 0, 3],
        [0, 0, 0, 3, 0, 0, 3],
        [0, 3, 0, 0, 0, 3, 3],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 3, 0, 0, 3, 3, 0],
        [0, 3, 0, 0, 3, 3, 0],
        [0, 0, 0, 3, 5, 5, 0],
        [0, 0, 0, 3, 5, 5, 0],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 0, 1, 3, 0, 0, 1],
        [0, 0, 3, 0, 0, 3, 3],
        [0, 0, 0, 3, 0, 3, 0],
        [0, 3, 3, 3, 0, 3, 0],
        [0, 3, 3, 3, 0, 3, 0],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 0, 0, 3, 0, 0, 3],
        [0, 3, 0, 0, 0, 3, 3],
        [0, 0, 3, 0, 3, 0, 3],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 0, 3, 0, 3, 0, 3],
        [0, 0, 3, 0, 0, 3, 3],
        [0, 3, 3, 3, 0, 0, 3],
        [0, 0, 0, 3, 0, 3, 0],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 3, 3, 3, 3, 3, 0],
        [0, 3, 3, 3, 3, 3, 0],
        [0, 3, 3, 3, 3, 0, 3],
        [0, 3, 3, 3, 3, 0, 3],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 0, 0, 3, 0, 0, 3],
        [0, 3, 3, 3, 0, 3, 0],
        [0, 3, 0, 0, 0, 3, 3],
        [0, 3, 0, 0, 3, 3, 0],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 3, 0, 0, 3, 3, 0],
        [0, 0, 3, 0, 0, 3, 3],
        [0, 0, 0, 3, 0, 3, 0],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 3, 3, 3, 0, 0, 3],
        [0, 3, 3, 3, 0, 0, 3],
        [0, 0, 0, 3, 0, 0, 3],
        [0, 3, 0, 0, 0, 3, 3],
        [0, 0, 0, 3, 0, 5, 0],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 0, 1, 3, 1, 0, 1],
        [0, 0, 1, 3, 1, 0, 1],
        [0, 0, 3, 0, 3, 0, 3],
        [0, 0, 3, 0, 3, 0, 3],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 0, 3, 0, 0, 3, 3],
        [0, 0, 0, 3, 0, 3, 0],
        [0, 3, 0, 0, 3, 3, 0],
        [0, 3, 3, 3, 3, 3, 0],
        [0, 0, 0, 3, 0, 5, 0],
        [0, 3, 3, 3, 3, 3, 0],
        [0, 0, 0, 0, 0, 0, 1],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 0, 0, 3, 0, 5, 0],
        [0, 5, 0, 0, 5, 5, 0],
        [0, 0, 3, 0, 0, 3, 3],
        [0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 3, 0, 3, 0],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 3, 3, 3, 0, 0, 3],
        [0, 5, 0, 0, 5, 5, 0],
        [0, 0, 1, 3, 1, 0, 1],
        [0, 3, 3, 3, 0, 0, 3],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 0, 1, 3, 1, 0, 1],
        [0, 3, 3, 3, 3, 3, 0],
        [0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 3, 5, 1],
        [0, -1, 3, 0, 5, 2, 0],
        [0, 5, 0, 0, 5, 5, 0],
        [0, 0, 1, 0, 4, 5, 1],
        [0, 3, 3, 3, 0, 0, 0],
        [0, 0, 0, 3, 0, 5, 0],
        [0, 0, 0, 3, 0, 5, 0],
        [0, 0, 1, 0, 2, 5, 1],
        [0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 3, 1, 0, 1],
        [0, 5, 0, 0, 5, 5, 0],
        [0, -1, 1, 0, 3, 4, 2],
        [0, 0, 1, 0, 0, 5, 1],
        [0, 0, 0, 0, 0, 0, 1],
        [0, 5, 0, 0, 5, 5, 0],
        [0, 0, 1, 0, 1, 5, 1],
    ];

    public static function getNeighborCounterClockwiseRotations(int $baseCellId, int $direction) {
        return self::BASE_CELL_NEIGHBOR_COUNTER_CLOCKWISE_ROTATIONS[$baseCellId][$direction];
    }
}
